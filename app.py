import re
from flask import Flask, jsonify, render_template, url_for, request, redirect, send_file, make_response
from flask_socketio import SocketIO, send, emit
from openai import OpenAI
import markdown
from weasyprint import HTML, CSS
import io
import os
TEMPLATE = """**Ramie NASSERALDIN**  
32 rue du Ch√¢teau d'Eau, 91130 Ris-Orangis  
üìû 06 77 03 26 43  
‚úâÔ∏è nasseraldin.ramie@gmail.com  

---

<div style="text-align: right;">


**Konibo**  
15 Av. Descartes
Morangis, 91420  
administratif@konibo.fr  

</div>

### Objet : Candidature pour un contrat d'apprentissage ‚Äì D√©veloppement Informatique, IA, Automatisation & Int√©gration Web

---

√Ä Ris-Orangis, le 31 juillet 2025

Madame, Monsieur,

Actuellement en fin de cursus de BUT Informatique et sur le point d'int√©grer l'ENSIIE en cycle ing√©nieur, je suis √† la recherche d‚Äôun contrat d‚Äôapprentissage de 3 ans. Cette opportunit√© m‚Äôa particuli√®rement attir√©, en raison de son orientation technique concr√®te autour de l‚ÄôIA, de l‚Äôautomatisation des processus informatiques, et de l‚Äôint√©gration web avec le CRM Odoo.

Durant mon parcours, j‚Äôai eu l‚Äôoccasion de travailler sur plusieurs projets qui font directement √©cho aux missions propos√©es :  
- **Chez Renault Group**, j‚Äôai d√©velopp√© un **RAG** avec une interface utilisateur compl√®te avec **Flask**, en lien avec un syst√®me de r√©cup√©ration de donn√©es vectorielles ;  
- **Chez Avince Consulting**, j‚Äôai automatis√© la collecte et le traitement de donn√©es web via **Python** et **Selenium**, r√©duisant consid√©rablement les interventions manuelles ;  

Passionn√© par les technologies IA et le d√©veloppement backend comme frontend, je suis √©galement √† l‚Äôaise avec les enjeux li√©s √† la productivit√© informatique en entreprise. L‚Äôid√©e de concevoir un agent IA interne pour am√©liorer l‚Äôefficacit√© des techniciens hotline est un challenge que je trouve particuli√®rement motivant.

Curieux, autonome, rigoureux, je suis toujours en qu√™te d‚Äôam√©lioration continue et j‚Äôaime faire le lien entre technique et besoins m√©tiers.

Je serais ravi de pouvoir rejoindre votre √©quipe et participer activement √† la transformation digitale port√©e par Konibo.

Restant √† votre disposition pour un entretien, je vous prie d‚Äôagr√©er, Madame, Monsieur, l‚Äôexpression de mes salutations distingu√©es.

---

**Ramie NASSERALDIN**"""

PROMPT =f"""Tu es une IA sp√©cialis√©e dans la r√©daction de lettres de motivation professionnelles.

üéØ **Objectif :**
- G√©n√®re une lettre de motivation adapt√©e √† l‚Äôoffre et au profil de l‚Äôutilisateur.
- La lettre doit √™tre personnalis√©e et pertinente.
- Utilise le template fourni comme structure et ton de r√©f√©rence.

üìú **Instructions :**
- Respecte scrupuleusement la structure et le style du template.
- R√©utilise les sections du template et remplace le contenu par du texte coh√©rent en fonction de l‚Äôoffre et du profil.
- Si une section du template ne s‚Äôapplique pas, adapte-la intelligemment.
- Fournis le r√©sultat en **Markdown** identique au template : titres, gras, paragraphes.
- Ne fournis que la lettre finale, sans explication ni commentaire.

‚úÖ **Donn√©es fournies :**
- **Template** : {TEMPLATE}
- **Informations √† utiliser** : l‚Äôoffre d‚Äôemploi fournie par l‚Äôutilisateur + informations personnelles de l‚Äôutilisateur (nom, poste, exp√©riences, motivations).

‚ö†Ô∏è **Important :**
- Ne modifie pas la structure du template sauf pour adapter le contenu.
- Ne g√©n√®re pas de texte hors de la lettre.

"""



app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'  # Remplace par une cl√© secr√®te plus s√ªre en prod

socketio = SocketIO(app)

def br_forcer(md_text):
    lines = md_text.split('\n')
    result_lines = []

    for i, line in enumerate(lines):
        stripped = line.lstrip()

        # Si la ligne est un titre, liste, blockquote, code, s√©parateur => on ne touche pas la fin
        if (re.match(r'^(#{1,6} )', stripped) or  # titres # ...
            re.match(r'^([-*+]|[0-9]+\.) ', stripped) or  # listes
            re.match(r'^(> )', stripped) or  # blockquote
            re.match(r'^```', stripped) or  # d√©but code block
            re.match(r'^---$', stripped) or  # s√©parateur
            stripped == ''):
            # Ligne markdown de bloc ou vide => on ne met pas <br>
            result_lines.append(line)
        else:
            # Sinon on force un <br> en fin de ligne (sauf si d√©j√† fin de texte)
            if i < len(lines) -1 and lines[i+1].strip() != '':
                # ajouter <br> pour le saut simple
                result_lines.append(line + '<br>')
            else:
                result_lines.append(line)

    return '\n'.join(result_lines)

@app.route('/')
def index():
    return render_template('index.html') 


@app.route('/history')
def history():
    return render_template("history.html")

@app.route('/settings')
def settings():
    return render_template("settings.html")


@socketio.on('generate_cv')
def handle_generate_cv(text):
    print(f'Received generate_cv with data: {text}')

    client = OpenAI(
        base_url="https://openrouter.ai/api/v1",
        api_key=os.getenv("OPENROUTER_API_KEY"),
    )

    completion = client.chat.completions.create(
        model="deepseek/deepseek-r1-0528:free",
        messages=[
            {
                "role": "system",
                "content": PROMPT
            },
            {
                "role": "user",
                "content": text['text']
            }
        ]
    )

    print(f'Completion: {completion.choices[0].message.content}')
    emit('response', {'data': completion.choices[0].message.content}, to=request.sid)

@socketio.on('export-pdf')
def export_pdf(data):
    md_text = data['data']  # Ton Markdown depuis le client
    md_text = br_forcer(md_text)

    # 1Ô∏è‚É£ Markdown ‚Üí HTML
    html_body = markdown.markdown(md_text, extensions=['fenced_code', 'tables'])

    # 2Ô∏è‚É£ HTML avec CSS GitHub + font-size custom
    html_content = f"""
    <html>
      <head>
        <meta charset="utf-8">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.5.1/github-markdown-light.min.css">
        <style>
          body {{
            box-sizing: border-box;
            min-width: 200px;
            max-width: 800px;
            margin: auto;
            padding: 40px;
          }}
          .markdown-body {{
            font-size: 9pt; /* üëà Forcer la taille de police */
          }}
        </style>
      </head>
      <body class="markdown-body">
        {html_body}
      </body>
    </html>
    """

    pdf_io = io.BytesIO()
    HTML(string=html_content).write_pdf(pdf_io)
    pdf_io.seek(0)

    # ‚ö°Ô∏è Renvoie directement la r√©ponse binaire
    return send_file(
        pdf_io,
        as_attachment=True,
        download_name='generated_cv.pdf',
        mimetype='application/pdf'
    )



if __name__ == '__main__':
    socketio.run(app, debug=True)
